#icon: DOP/split
#context: sop
#type: node

= Waypoint qL =

*interface version 2*

"""Marks a point in a SOP network where intermediate (or expensive) results can be saved to disk and re-used."""

If you have complex SOP networks with many nodes (such as large-scale RBD simulations), you probably want to
break down your network to a few logical units. A Waypoint SOP can represent the end of such a logical unit,
with the additional feature of being able to store it on disk (so it can be reused instead of recalculated).

NOTE:
    Waypointing is (conceptually) _not_ caching, although the underlining mechanism is similar
    (and obviously the SOP node can be used as a cache). It's more akin to 'baking' than caching.


*Conceptual differences between waypointing and caching*

- _Waypoint: a separator between large logical units_

    In really complex networks, the entire network consists of usually two or more large logical units.
    A waypoint marks the end of such a unit ('compartment').

- _Manual update: As workflow_

    When the user finished working on (or modifying) a large logical block of SOP nodes, she marks it
    by 'rendering' the related waypoint (possibly some downstream waypoints, too). Although this has
    to be done manually, this level of caretaking always has to happen in practice
    (it's also a good opportunity to compare with an earlier on-disk version, etc.)

- _Manual update: Breaks procedural behaviour_

    Caching is (supposed to be) automatic, waypointing is not.

    A consequence of manual updating is that it is easy for the geometry on disk to get out of
    sync with the state of the SOP network. This can be less of a problem if the waypoint represents the
    end results of a large logical SOP block (as mentioned above).

    On the other hand, a SOP network littered with Waypoint nodes _do_ turn into a nightmare quickly. So...

WARNING:
    This SOP introduces additional (manual) maintenance burdens to your SOP network --
    as soon as you start using waypoints, you'll have to ensure that the geometry on disk matches
    the current state of the upstream network. This can be a source for
    many mistakes. _Use as few instances of this node as possible._


*Useful features*

- _Takes_

    Takes allow to work with lower-quality settings (if possible) and only calculate with higher settings
    when writing the results to disk (e.g. when baking ambient occlusion to per-point colors, the sampling
    quality can be boosted for the disk version only).

- _Variants_

    The writing/reading of multiple _variants_ of the same input is supported (see the `Output Variant`
    and `Variant Names` parameters below). One practical application is when used together
    with a [Wedge output driver (ROP)|Node:out/wedge].

    TIP:
        You can invoke the "Writer" mode of a Waypoint from an output network using a [Fetch ROP|Node:out/fetch]
        (for this purpose, the internal writer node in a Waypoint is called `RENDER` -- e.g. `/obj/geo1/waypoint_ql1/RENDER`).
        This way it's easy to build [Node:out/fetch]/[Node:out/wedge] networks that generate variants quicksville.


@parameters

    Pass Through:
        If turned on, the Waypoint does nothing (behaves like a plain [Node:sop/switch] node).
        This is 'On' by default and needed to be turned off explicitly once the user performed a
        write-to-disk operation.

    Waypoint State:
        Main node state.
        Whenever it's changed, the node color also gets updated to give more distinct visual feedback.

        Pass Through (Disabled):
            An inactive waypoint. It just passes through any input geometry as it is.

        Active (Read from Disk):
            An active waypoint that reads geometry from disk and feeds it to its output.

    Points-Only for Consecutive Frames:
        When writing sequences, only the first frame will contain the complete geometry.
        The other frames will store point data only (even that is stripped down to
        position and velocity by default -- the idea to reduce disk consumption,
        I/O and geometry construction time.)

        Works best with "regular" high-res geometry (i.e. lots of primitives).
        *Do not use it for particles* (or objects with changing topology).

    Remove Attribs:
        Which attributes to remove from the 'points-only' files.
        The default is to remove all but `v` (velocity).

        Groups are always removed.

    File Name (tab):
        Settings for the path/name of the output file(s).

        The folder, name and extension parts are each represented by a parameter. This makes
        setting them up quick and easy (it's usually just clicking on one of the preset menu items).

        They also come with very reasonable default values (basically you're just have to give the
        Waypoint a meaningful name and that's it).

        Output Directory:
            The folder to store the output file(s) in. If it doesn't exist, it will be created before
            writing. By default it's a subfolder with the name of the Waypoint node.

        Name:
            The output file name. (See the pop-down menu for the most common settings, including
            _variant-by-number_ and _variant-by-name_, see below.)

        Extension:
            Output file extension (with file numbering for sequences). See the pop-down menu for
            the most regular values. The `.gz` suffix indicates file compression; `.bhclassic`
            is the "old" H11 bgeo format, compatible with other applications such as PartIO.

        Output Variant:
            This parameter allows to include a _variant_ (version) in the output file name (using the
            appropriate `Name` presets).

            It lets the user save a new version instead of overwriting the previous one (just by incrementing
            this parameter), or to use a [Wedge ROP|Node:out/wedge] to generate multiple versions from a ROP
            network.

        Variant Names:
            A list of names associated with variant indices (space-separated -- first is variant #0, second
            is variant #1, and so on).

        Variant Name (feedback):
            This is a read-only parameter that returns the variant name specified by the variant number.
            (Try pressing MMB on the parameter label, then pull on the `variant` slider to see the names displayed).

            This is a "feedback" parameter for display purposes, but it can also be used in expressions
            (e.g. in the output file name, see above).

        Full Path/Name:
            This parameter contains the final pathname that is passed to both the geometry writer and reader.

            _Although it can be edited, it's recommended to keep the default expression as it is, and use the
            parameters above to build the output file name_.

            This parameter is intended to be used mostly as feedback. Press *MMB* on the parameter label to toggle
            its display to show the current path string.


    Writer (tab):
        Geometry writing settings (see also [Geometry ROP|Node:out/geometry]).

        Render:
            Pressing this button will write the evaulated upstream network to disk.

        Render with Take:
            The upstream network will be evaluated using the specified Take.

        Output File:
            The path and filename of the geometry file. By default the geometry name is built
            from the Waypoint SOP name and the Input Select index.

        Initialize Simulation OPs:
            Force all simulation OPs to be reset. This includes DOP Networks, POP SOPs, and other OPs that cache their results.

            This is the safest way to render out a simulation, because it starts the simulation from scratch and discards any partial simulations you might have done with different parameters. However, throwing away an already-cooked simulation can be expensive.

        PerfMon Output:
            If enabled, the Performance Monitor will be recording during the rendering process,
            and the resulting data will be saved to the file specified.

        Clear Comment Log:
            The comment field of the node is used as a simple message logging area (mostly logging
            rendering start/finish times). This button clears the comment field.


    Reader (tab):
        Geometry reading settings (geometry file name is specified in
        the Output File field above -- see also [File SOP|Node:sop/file]).

        Reload Geometry:
            Pressing this button will (re)read the geometry file from disk.
            *This button has to be pressed every time the geometry file is overwritten.*


    Tools (tab):
        Miscellaneous functions.

        Create Output Directory:
            Pressing this button will create the directory set up in the _File Name_ section.
            Note that this also happens automatically before each geometry write, so there's
            usually no need to do this manually.

        Open in File Manager:
            Open the output directory in the operating system's native file manager
            (right now it's linux-only and launches the Gnome _nautilus_ application).

        Delete Directory:
            Pressing this button will delete the entire output folder _with all contents_.
            Useful for getting rid of large amounts of cached geometry (but make sure the
            folder doesn't contain anything else important).

        Build File SOP (Loader):
            Creates a [File SOP|Node:sop/file] that is set up to read the file(s) written by
            the current waypoint node (including variants).

        Create Fetch, Fetch+Wedge ROP:
            Creates a [Fetch ROP|Node:out/fetch] or a [Node:out/fetch]/[Node:out/wedge]
            combination to render this waypoint (in the specified ROP network).

            NOTE:
                For Wedge ROP(s), make sure the variant range is set up properly.



@related
    - [Node:sop/cache]
    - [Node:sop/file]
    - [Node:out/fetch]
    - [Node:out/wedge]



@Release_Notes Release Notes

    _interface version 2_ ---

    2012-10-02:
        - Bug fix: Points Only for Consecutive Frames now uses the first frame of the render range (instead of frame #1).

    2012-08-05:
        - Full output file (sequence) path is now constructed from three components (path, name, extension) -- all represented with a separate parameter. This results in shorter filename expressions.
        - Got rid of multiple inputs, added _variants_ instead (so there's still built-in support for writing multiple variants of the same input). Variants can be numeric or textual.
        - The output directory is created before writing (if it doesn't exist).


    _interface version 1_ ---

    Version 0.0.3:
        - Output filename helper "preset" menu
        - Node state (disabled/enabled) feedback both as node color and in a parameter editor message
        - Start/end time for the last few render processes are stored (logged) in the node comment field
        - Performance monitoring

    Version 0.0.2:
        - Option for clamping the time range to the range set up in the Writer tab
        - Option for writing point data only for all but the first frame

    Version 0.0.1:
        First release.

