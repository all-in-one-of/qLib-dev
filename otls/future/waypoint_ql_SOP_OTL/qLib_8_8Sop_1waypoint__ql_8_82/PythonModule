import datetime
import subprocess
import os
import os.path
import platform
import shutil
import getpass
import random


def dispmsg(msg):
    hou.ui.displayMessage(msg, ["Ok"])

def statmsg(msg):
    hou.ui.setStatusMessage(msg)

def ynreq(msg):
    return hou.ui.displayMessage(msg, ["Ok", "Cancel"]) == 0


def get_user():
    return getpass.getuser()

def get_hostname():
    return platform.node()



def replace(kwargs, fromstr, tostr, noCheck=False):
    n = hou.pwd()
    op = n.parm('sopoutput')
    out = op.unexpandedString()

    if not tostr in out or noCheck:
        out = out.replace(fromstr, tostr)
        op.set(out)



def set_color(kwargs):
    hou.pwd().setColor(
        hou.Color(
            (0.2, 0.0, 0.0) if int(kwargs['script_value'])==0
            else (0.8, 0.6, 0.0) )
        );


def open_dir(dir="", param=None):
    # TODO: make this work on windows
    if param: dir = hou.pwd().parm(param).eval()
    statmsg("Opening file manager at %s" % dir)
    subprocess.call(["nautilus", dir])


def log_comment(n, c):
    c0 = '\n'.join( n.comment().split('\n')[-8:] )
    n.setComment("%s\n[%s] %s" % \
        (c0, datetime.datetime.now().strftime("%y%m%d %H:%M.%S"), c))



def clear_log():
    if ynreq("Are you sure to clear the comment log for this waypoint?"):
        hou.pwd().setComment('')


def pm_start(n):
    d = datetime.datetime.now().strftime("%y%m%d-%H:%M.%S")
    f = n.parm('perfmon_output').eval()
    hou.session.__perf = ( hou.perfMon.startProfile("%s (%s)" % (n.name(), d) ), f )


def pm_end(n):
    if hasattr(hou.session, '__perf'):
        hou.session.__perf[0].stop()
        #n = hou.pwd()
        f = hou.session.__perf[1]
        print "* COMPLETED %s '%s' -- Saving hperf '%s' *" % (n.type().name().upper(), n.path(), f)
        hou.session.__perf[0].save(f)
        del hou.session.__perf


def mk_dir(dir="", param=None):
    try:
        if param: dir = hou.pwd().parm(param).eval()
        if dir!="":
            os.makedirs(dir)
            statmsg("created directory '%s'" % dir)
    except:
        pass


def rm_dir(dir="", param=None):
    try:
        if param: dir = hou.pwd().parm(param).eval()
        if dir!="":

            if ynreq("DELETE directory '%s'?" % dir):
                shutil.rmtree(dir)
                statmsg("deleted directory '%s'" % dir)
    except:
        pass


def pre_render(path):
    n = hou.node(path)
    msg = "Render started (%s @ %s)..." % (get_user(), get_hostname())
    log_comment( n, msg )
    print "%s: %s" % (path, msg)

    d = n.parm('outdir').eval()
    mk_dir(d) # create output dir

    if n.parm('perfmon').eval()!=0:
        pm_start(n)



def post_render(path):
    n = hou.node(path)
    log_comment(n, "RENDER COMPLETED.")

    if n.parm('perfmon').eval()!=0:
        pm_end(n)



def place_under(which, where):
        """Place a node below another in a node network."""
        if which.parent()==where.parent():
            pos = where.position()
            which.setPosition([ pos[0]+random.random()-0.5, pos[1]-0.5 ])



def create_file_loader(soptype="file"):
    """Create related file SOP (loader)."""
    n = hou.pwd()
    p = n.parent()
    fm = soptype=="filemerge"

    if True: #ynreq("Create loader %s SOP for %s?" % (soptype.capitalize(), n.name())):

        f = p.createNode(soptype, "%s_loader" % n.name())
        place_under(f, n)

        # hackety-hack    
        cmd = 'parm { name "filemode" baseparm export none } parm { name "file" baseparm export all } parm { name "reload" baseparm export none } parm { name "objpattern" baseparm export none } parm { name "geodatapath" baseparm export none } parm { name "missingframe" baseparm export none } parm { name "loadtype" baseparm export none } parm { name "OS" label "Waypoint Name" type string default { "waypoint_ql1" } export none } parm { name "outdir" label "Output Directory" type string default { "$HIP/tmp--sim/`chs(\\"OS\\")`" } export none } parm { name "outname" label "Name" type string default { "`chs(\\"OS\\")`_`ch(\\"variant\\")`" } export none } parm { name "outext" label "Extension" type string default { "$F4.bgeo.gz" } export none } parm { name "variant" label "Variant" type integer default { "0" } export none } parm { name "variantnames" label "Variant Names" type string default { "default hires proxy" } export none } parm { name "variantname" label "Variant Name" type string default { "" } export none }'
        cmd = "opspareds '%s' %s" % (cmd, f.path())
        hou.hscript(cmd)
    
        hou.hscript("opparm %s file ('`chs(\"outdir\")`/`chs(\"outname\")`.`chs(\"outext\")`') OS ( %s )" % (f.path(), n.name()))
    
        # copy string parameters
        for parm in ['outdir', 'outname', 'outext', 'variantnames', 'variantname']:
            v = n.parm(parm).unexpandedString()
            v = v.replace('${OS}', '`chs("OS")`')
            v = v.replace('$OS', '`chs("OS")`')
            f.parm(parm).set(v)
    
        f.parm("variant").set( n.parm("variant").eval() )

        if fm:
            f.parm("mergerange1").set(n.parm("out_wedge_rangex").eval())
            f.parm("mergerange2").set(n.parm("out_wedge_rangey").eval())

        statmsg("Created node: %s" % f.path())



def create_rop_fetch(fetch=True, wedge=False, multiWedges=False):
    """Create related ROP nodes (fetch/wedge)."""
    n = hou.pwd()

    if ynreq("Create ROP(s) for %s?" % n.name()):
        try:
            p = n.parm("out_ropnet").eval()
            vp= n.parm("out_variant_parm").eval()
            r = hou.node(p)

            if r is None:
                r = hou.node(os.path.dirname(p)).createNode("ropnet", os.path.basename(p))
                place_under(r, n)

            if not vp or vp=="":
                vp = "variant"

            f = None
            R = "%s/RENDER" % n.path()
            if fetch:
                f = r.createNode("fetch", "%s_fetch" % n.name())
                f.parm("source").set(R)
                f.setPosition([0,0])
                msg = "Created node(s): %s" % f.path()
            else:
                f = hou.node(R)
                msg = "Using node: %s" % f.path()
    
            if wedge:

                r0 = n.parm("out_wedge_rangex").eval()
                r1 = n.parm("out_wedge_rangey").eval() if multiWedges else r0

                for idx in range(r0, r1+1):
                    w = r.createNode("wedge", "%s_wedge_%d" % (n.name(), idx))
                    w.setPosition([0.5, -0.8*(idx-r0+1)])
                    w.parm("driver").set("%s" % f.path())
                    w.parm("random").set(False)
                    w.parm("wedgeparams").set(1)

                    w.parm("wedgenum").setExpression('opdigits(opname("."))')
                    w.parm("wrange").set(1 if multiWedges else 0)
        
                    w.parm("name1").set(vp)
                    w.parm("chan1").set("%s/%s" % (n.path(), vp))
                    w.parm("steps1").setExpression('ch("range1y")-ch("range1x")+1')
                    w.parm("range1x").set(n.parm("out_wedge_rangex").eval())
                    w.parm("range1y").set(n.parm("out_wedge_rangey").eval())
    
                    msg += " / %s" % w.name()

            statmsg(msg)
    
        except:
            pass
