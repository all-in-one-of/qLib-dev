import datetime

def replace(kwargs, fromstr, tostr, noCheck=False):
    n = hou.pwd()
    op = n.parm('sopoutput')
    #out = op.eval()
    out = op.unexpandedString()

    if not tostr in out or noCheck:
        out = out.replace(fromstr, tostr)
        op.set(out)



def outpreset(kwargs):

    m = kwargs['script_value']
    f, t = None, None

    if m=="to_seq":
        f, t = ".bgeo", ".$F4.bgeo"
        replace(kwargs, f, t)

    if m=="to_single":
        f, t = ".$F4.bgeo", ".bgeo"
        replace(kwargs, f, t, noCheck=True)



def set_color(kwargs):

    hou.pwd().setColor(
        hou.Color(
            (0.0, 0.0, 0.0) if kwargs['script_value']=='off'
            else (0.8, 0.6, 0.0) )
        );



def log_comment(n, c):
    c0 = '\n'.join( n.comment().split('\n')[-8:] )
    n.setComment("%s\n[%s] %s" % \
        (c0, datetime.datetime.now().strftime("%y%m%d %H:%M.%S"), c))



def clear_log():
    hou.pwd().setComment('')


def pm_start(n):
    d = datetime.datetime.now().strftime("%y%m%d-%H:%M.%S")
    f = n.parm('perfmon_output').eval()
    hou.session.__perf = ( hou.perfMon.startProfile("%s (%s)" % (n.name(), d) ), f )


def pm_end(n):
    if hasattr(hou.session, '__perf'):
        hou.session.__perf[0].stop()
        #n = hou.pwd()
        f = hou.session.__perf[1]
        print "* COMPLETED %s '%s' -- Saving hperf '%s' *" % (n.type().name().upper(), n.path(), f)
        hou.session.__perf[0].save(f)
        del hou.session.__perf



def pre_render(path):
    n = hou.node(path)
    log_comment(n, "Render started...")

    if n.parm('perfmon').eval()!=0:
        pm_start(n)


def post_render(path):
    n = hou.node(path)
    log_comment(n, "RENDER COMPLETED.")

    if n.parm('perfmon').eval()!=0:
        pm_end(n)

