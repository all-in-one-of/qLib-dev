# Dialog script for qLib::waypoint_ql::1 automatically generated 07/22/12 00:57:34

{
    name	qLib::waypoint_ql::1
    script	qLib::waypoint_ql::1
    label	"Waypoint qL"

    help {
	""
    }

    inputlabel	1	"Sub-Network Input #1"
    inputlabel	2	"Sub-Network Input #2"
    inputlabel	3	"Sub-Network Input #3"
    inputlabel	4	"Sub-Network Input #4"
    inputlabel	5	"Sub-Network Input #5"

    parm {
	name	"label_passthru_0"
	label	"Label"
	type	label
	nolabel
	default	{ ".. waypoint inactive .." }
	hidewhen	"{ passthru == 0 }"
	range	{ 0 1 }
	export	none
    }
    parm {
	name	"label_passthru_1"
	label	"Label"
	type	label
	nolabel
	default	{ "..:: WAYPOINT ACTIVE :: Using data from storage ::.." }
	hidewhen	"{ passthru != 0 }"
	range	{ 0 1 }
	export	none
    }
    group {
	name	"folder1"
	label	"..: SOP Waypoint :.."

	parm {
	    name	"passthru"
	    label	"Pass Through (Disabled)"
	    type	toggle
	    default	{ "1" }
	    range	{ 0! 10 }
	    export	none
	    parmtag	{ "script_callback_language" "python" }
	    parmtag	{ "script_callback" "hou.pwd().hdaModule().set_color(kwargs)" }
	    parmtag	{ "autoscope" "0000000000000000" }
	}
	parm {
	    name	"input"
	    label	"Input Select"
	    type	integer
	    default	{ "0" }
	    menureplace	{
		"0"	"1st Input"
		"1"	"2nd Input"
		"2"	"3rd Input"
		"3"	"4th Input"
	    }
	    range	{ 0! 3! }
	    export	none
	    parmtag	{ "autoscope" "0000000000000000" }
	}
	parm {
	    name	"pts_only"
	    label	"Points Only for Consecutive Frames"
	    type	toggle
	    default	{ "0" }
	    range	{ 0 1 }
	    export	none
	}
	parm {
	    name	"delattribs"
	    label	"Remove Attribs"
	    type	string
	    default	{ "* ^v" }
	    disablewhen	"{ pts_only == 0 }"
	    range	{ 0 1 }
	    export	none
	    parmtag	{ "autoscope" "0000000000000000" }
	}
	group {
	    name	"folder2"
	    label	":: Writer ::"

	    import {
		label	Writer
		source	"op:geom_writer"
		mask	"* ^soppath ^alfprogress ^*pre* ^*post*"
		enable	1

		parm {
		    name	"execute"
		    label	"Render"
		    type	button
		    joinnext
		    default	{ "0" }
		    range	{ 0 1 }
		    export	none
		    parmtag	{ "import_token" "execute" }
		    parmtag	{ "import_source" "op:geom_writer" }
		    parmtag	{ "autoscope" "0000000000000000" }
		}
		parm {
		    name	"renderdialog"
		    label	"Render Control..."
		    type	button
		    default	{ "0" }
		    range	{ 0 1 }
		    export	none
		    parmtag	{ "import_token" "renderdialog" }
		    parmtag	{ "import_source" "op:geom_writer" }
		    parmtag	{ "autoscope" "0000000000000000" }
		}
		parm {
		    name	"trange"
		    label	"Valid Frame Range"
		    type	ordinal
		    default	{ "off" }
		    menu	{
			"off"	"Render Any Frame"
			"normal"	"Render Frame Range"
			"on"	"Render Frame Range Only (Strict)"
		    }
		    range	{ 0 1 }
		    export	none
		    parmtag	{ "import_token" "trange" }
		    parmtag	{ "import_source" "op:geom_writer" }
		    parmtag	{ "autoscope" "0000000000000000" }
		}
		parm {
		    name	"f"
		    label	"Start/End/Inc"
		    type	float
		    size	3
		    default	{ "1" "240" "1" }
		    disablewhen	"{ trange == off }"
		    range	{ 0 10 }
		    export	none
		    parmtag	{ "import_token" "f" }
		    parmtag	{ "import_source" "op:geom_writer" }
		    parmtag	{ "autoscope" "0000000000000000" }
		}
		parm {
		    name	"take"
		    label	"Render With Take"
		    type	string
		    default	{ "_current_" }
		    menu	{
			[ "opmenu -l RENDER take" ]
		    }
		    range	{ 0 1 }
		    export	none
		    parmtag	{ "import_token" "take" }
		    parmtag	{ "import_source" "op:geom_writer" }
		    parmtag	{ "autoscope" "0000000000000000" }
		}
		parm {
		    name	"sopoutput"
		    label	"Output File"
		    type	file
		    joinnext
		    default	{ "$HIP/${OS}_i`ch(\"input\")`.bgeo.gz" }
		    menureplace	{
			[ "opmenu -l geom_writer sopoutput" ]
		    }
		    range	{ 0 1 }
		    export	none
		    parmtag	{ "import_token" "sopoutput" }
		    parmtag	{ "import_source" "op:geom_writer" }
		    parmtag	{ "autoscope" "0000000000000000" }
		}
		parm {
		    name	"sopoutput_presets"
		    label	"Output Presets"
		    type	button
		    nolabel
		    default	{ "1" }
		    menumini	{
			"to_seq"	"sequence"
			"to_single"	"single file"
		    }
		    range	{ 0 1 }
		    export	none
		    parmtag	{ "script_callback_language" "python" }
		    parmtag	{ "script_callback" "hou.pwd().hdaModule().outpreset(kwargs)" }
		}
		parm {
		    name	"xformtype"
		    label	"Transform"
		    type	ordinal
		    default	{ "none" }
		    menu	{
			"none"	"None"
			"world"	"Into World Space"
		    }
		    range	{ 0 1 }
		    export	none
		    parmtag	{ "import_token" "xformtype" }
		    parmtag	{ "import_source" "op:geom_writer" }
		    parmtag	{ "autoscope" "0000000000000000" }
		}
		parm {
		    name	"initsim"
		    label	"Initialize Simulation OPs"
		    type	toggle
		    default	{ "off" }
		    range	{ 0 1 }
		    export	none
		    parmtag	{ "import_token" "initsim" }
		    parmtag	{ "import_source" "op:geom_writer" }
		    parmtag	{ "autoscope" "0000000000000000" }
		}
		parm {
		    name	"reportnetwork"
		    label	"Report Network Use"
		    type	toggle
		    default	{ "off" }
		    range	{ 0 1 }
		    export	none
		    parmtag	{ "import_token" "reportnetwork" }
		    parmtag	{ "import_source" "op:geom_writer" }
		    parmtag	{ "autoscope" "0000000000000000" }
		}
		parm {
		    name	"saveretry"
		    label	"Save Retries"
		    type	integer
		    default	{ "0" }
		    range	{ 0! 5 }
		    export	none
		    parmtag	{ "import_token" "saveretry" }
		    parmtag	{ "import_source" "op:geom_writer" }
		    parmtag	{ "autoscope" "0000000000000000" }
		}
		parm {
		    name	"savebackground"
		    label	"Save in Background"
		    type	toggle
		    default	{ "off" }
		    range	{ 0 1 }
		    export	none
		    parmtag	{ "import_token" "savebackground" }
		    parmtag	{ "import_source" "op:geom_writer" }
		    parmtag	{ "autoscope" "0000000000000000" }
		}
	    }

	    parm {
		name	"perfmon"
		label	"Performance Monitoring"
		type	toggle
		nolabel
		joinnext
		default	{ "0" }
		help	"Enable the Performance Monitor during render and write the results to a file."
		range	{ 0 1 }
		export	none
	    }
	    parm {
		name	"perfmon_output"
		label	"PerfMon Output"
		type	file
		default	{ "$HIP/$HIPNAME:r.i`ch(\"input\")`.hperf" }
		help	"Output file for recorded performance monitor data."
		disablewhen	"{ perfmon == 0 }"
		range	{ 0 1 }
		export	none
	    }
	    parm {
		name	"clear_log"
		label	"Clear Comment Log"
		type	button
		default	{ "1" }
		range	{ 0 1 }
		export	none
		parmtag	{ "script_callback_language" "python" }
		parmtag	{ "script_callback" "hou.pwd().hdaModule().clear_log()" }
	    }
	    parm {
		name	"label_ptsonly_3"
		label	"Label"
		type	label
		nolabel
		default	{ "POINTS ONLY: A frame range should also be set for this mode." }
		hidewhen	"{ pts_only == 0 } { trange != off }"
		range	{ 0 1 }
		export	none
	    }
	    parm {
		name	"label_ptsonly_1"
		label	"Label"
		type	label
		nolabel
		default	{ "POINTS ONLY: the full geometry will be written for frame `ch(\"f1\")`." }
		hidewhen	"{ pts_only == 0 } { trange == off }"
		range	{ 0 1 }
		export	none
	    }
	}

	group {
	    name	"folder2_1"
	    label	":: Reader ::"

	    import {
		label	Reader
		source	"op:geom_reader"
		mask	"reload objpattern geodatapath missingframe loadtype"
		enable	1

		parm {
		    name	"reload"
		    label	"Reload Geometry"
		    type	button
		    default	{ "0" }
		    range	{ 0 1 }
		    export	none
		    parmtag	{ "import_token" "reload" }
		    parmtag	{ "import_source" "op:geom_reader" }
		    parmtag	{ "autoscope" "0000000000000000" }
		}
		parm {
		    name	"objpattern"
		    label	"Object Mask"
		    type	string
		    default	{ "*" }
		    range	{ 0 1 }
		    export	none
		    parmtag	{ "import_token" "objpattern" }
		    parmtag	{ "import_source" "op:geom_reader" }
		    parmtag	{ "autoscope" "0000000000000000" }
		}
		parm {
		    name	"geodatapath"
		    label	"Geometry Data Path"
		    type	string
		    default	{ "" }
		    range	{ 0 1 }
		    export	none
		    parmtag	{ "import_token" "geodatapath" }
		    parmtag	{ "import_source" "op:geom_reader" }
		    parmtag	{ "autoscope" "0000000000000000" }
		}
		parm {
		    name	"missingframe"
		    label	"Missing Frame"
		    type	ordinal
		    default	{ "error" }
		    menu	{
			"error"	"Report Error"
			"empty"	"No Geometry"
		    }
		    range	{ 0 1 }
		    export	none
		    parmtag	{ "import_token" "missingframe" }
		    parmtag	{ "import_source" "op:geom_reader" }
		    parmtag	{ "autoscope" "0000000000000000" }
		}
		parm {
		    name	"loadtype"
		    label	"Load"
		    type	ordinal
		    default	{ "full" }
		    menu	{
			"full"	"All Geometry"
			"infobbox"	"Info Bounding Box"
			"info"	"Info"
		    }
		    range	{ 0 1 }
		    export	none
		    parmtag	{ "import_token" "loadtype" }
		    parmtag	{ "import_source" "op:geom_reader" }
		    parmtag	{ "autoscope" "0000000000000000" }
		}
	    }

	    group {
		name	"folder5"
		label	"Frame Range"

		parm {
		    name	"clamp_frame_range"
		    label	"Clamp Frame Range"
		    type	toggle
		    nolabel
		    joinnext
		    default	{ "1" }
		    disablewhen	"{ trange == off }"
		    range	{ 0 1 }
		    export	none
		}
		parm {
		    name	"rf"
		    label	"Clamp Range to"
		    type	float
		    size	2
		    default	{ "ch(\"f1\")" "ch(\"f2\")" }
		    disablewhen	"{ trange == off } { clamp_frame_range == 0 }"
		    range	{ 0 10 }
		    export	none
		    parmtag	{ "autoscope" "0000000000000000" }
		}
		parm {
		    name	"frame"
		    label	"Frame #"
		    type	float
		    default	{ "clamp(ch(\"rf1\"), ch(\"rf2\"), $FF)" }
		    disablewhen	"{ trange == off } { clamp_frame_range == 0 }"
		    range	{ 0 10 }
		    export	none
		}
	    }

	    parm {
		name	"label_ptsonly_4"
		label	"Label"
		type	label
		nolabel
		default	{ "POINTS ONLY: full-geometry file expected @ frame `ch(\"f1\")`." }
		hidewhen	"{ pts_only == 0 }"
		range	{ 0 1 }
		export	none
	    }
	}

	group {
	    name	"folder2_2"
	    label	"NOTE"
	    invisibletab

	    parm {
		name	"labelparm"
		label	"Label"
		type	label
		invisible
		nolabel
		default	{ "Press 'Reload' in Reader tab after (re-)Rendering geometry." }
		range	{ 0 1 }
		export	none
	    }
	    parm {
		name	"label_ptsonly_2"
		label	"Label"
		type	label
		nolabel
		default	{ "POINTS ONLY: full geometry stored for frame #`ch(\"f1\")` only." }
		hidewhen	"{ pts_only == 0 }"
		range	{ 0 1 }
		export	none
	    }
	}

    }

}
