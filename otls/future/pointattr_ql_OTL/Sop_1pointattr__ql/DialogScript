# Dialog script for pointattr_ql automatically generated 03/29/12 22:43:27

{
    name	pointattr_ql
    script	pointattr_ql
    label	"PointAttr qL"

    help {
	""
    }

    inputlabel	1	"Input Geometry"
    inputlabel	2	"Second Geometry"
    inputlabel	3	"Sub-Network Input #3"
    inputlabel	4	"Sub-Network Input #4"

    import {
	label	Random
	enable	0

	parm {
	    name	"name"
	    label	"Attribute"
	    type	string
	    default	{ "pscale" }
	    menureplace	{
		[ "echo Alpha Alpha pscale pscale width width" ]
	    }
	    range	{ 0 1 }
	    export	none
	}
	parm {
	    name	"varname"
	    label	"Local Variable"
	    type	string
	    default	{ "" }
	    range	{ 0 1 }
	    export	none
	}
    }

    group {
	name	"folder2_1"
	label	"Operations"

	parm {
	    name	"geom"
	    label	"Geometry"
	    type	integer
	    default	{ "0" }
	    menu	{
		"0"	"No Change"
		"1"	"Keep Points Only"
		"2"	"Points Only (Particles)"
	    }
	    range	{ 0 10 }
	    export	none
	}
	multiparm {
	    name	"oplist"
	    label	"no.# Operations"

	    groupradio {
		name	"op_#_"
		label	"-"

		parm {
		    name	"note#"
		    label	"'Off' Meaning"
		    type	string
		    default	{ "" }
		    menureplace	{
			""	"(Clear Field)"
			"not yet set up"	"not yet set up"
			"work in progress"	"work in progress"
			"temporary 'off'"	"temporary 'off'"
			"OFF (do not enable)"	"permanent OFF"
		    }
		    range	{ 0 1 }
		    export	none
		}
	    }

	    groupradio {
		name	"op_#__1"
		label	"get"

		parm {
		    name	"import_attrib#"
		    label	"Attribute"
		    type	string
		    default	{ "" }
		    menureplace	{
			[ "# TODO: get attr list from the appropriate input" ]
			[ "" ]
			[ "r = []" ]
			[ "" ]
			[ "try:" ]
			[ "    attrs = hou.pwd().geometry().pointAttribs()" ]
			[ "    attrs = [ a.name() for a in attrs if a.dataType() is not hou.attribData.String ]" ]
			[ "    " ]
			[ "    for a in attrs:" ]
			[ "        r.append(a)" ]
			[ "        r.append(a)" ]
			[ "except:" ]
			[ "    pass" ]
			[ "" ]
			[ "return r" ]
			language	python
		    }
		    range	{ 0 1 }
		    export	none
		}
		parm {
		    name	"import_attrib_type#"
		    label	"Type / Input"
		    type	integer
		    joinnext
		    default	{ "0" }
		    menu	{
			"0"	"Float"
			"1"	"Integer"
			"2"	"Vector: X"
			"3"	"Vector: Y"
			"4"	"Vector: Z"
			"5"	"Vec.Length"
		    }
		    range	{ 0 10 }
		    export	none
		}
		parm {
		    name	"import_input_idx#"
		    label	"Input Index"
		    type	integer
		    nolabel
		    joinnext
		    default	{ "0" }
		    menu	{
			"0"	"1st"
			"1"	"2nd"
		    }
		    range	{ 0 1 }
		    export	none
		}
		parm {
		    name	"import_attrib_del#"
		    label	"Delete"
		    type	toggle
		    default	{ "0" }
		    range	{ 0 1 }
		    export	none
		}
	    }

	    groupradio {
		name	"op_#__2"
		label	"set"

		parm {
		    name	"init_type#"
		    label	"Type"
		    type	integer
		    default	{ "0" }
		    menu	{
			"0"	"Constant Value"
			"1"	"Random Range [0..1]"
			"2"	"Point Index [0 .. #pts)"
			"3"	"Point Index [0..1]"
			"4"	"Point ID [0..max id]"
			"5"	"Age (current age)"
			"6"	"Life (full lifespan)"
			"7"	"Relative Lifespan [0..1)"
			"8"	"Vertex Index"
			"9"	"No. of Vertices on Prim"
			"10"	"Vertex Index [0..1]"
			"11"	"Primitive Index"
		    }
		    range	{ 0 10 }
		    export	none
		}
		parm {
		    name	"init_const#"
		    label	"Constant"
		    type	float
		    joinnext
		    default	{ "1" }
		    disablewhen	"{ init_type# != 0 }"
		    range	{ 0 1 }
		    export	none
		}
		parm {
		    name	"seed#"
		    label	"Seed"
		    type	integer
		    default	{ "0" }
		    disablewhen	"{ init_type# != 1 }"
		    range	{ 0 999 }
		    export	none
		}
	    }

	    groupradio {
		name	"op_#__3"
		label	"fit"

		parm {
		    name	"srcmin#"
		    label	"Src Min"
		    type	float
		    joinnext
		    default	{ "0" }
		    range	{ 0 1 }
		    export	none
		}
		parm {
		    name	"srcmax#"
		    label	"Max"
		    type	float
		    default	{ "1" }
		    range	{ 0 1 }
		    export	none
		}
		parm {
		    name	"destmin#"
		    label	"Dest Min"
		    type	float
		    joinnext
		    default	{ "0" }
		    range	{ 0 1 }
		    export	none
		}
		parm {
		    name	"destmax#"
		    label	"Max"
		    type	float
		    default	{ "1" }
		    range	{ 0 1 }
		    export	none
		}
	    }

	    groupradio {
		name	"op_#__4"
		label	"tune"

		parm {
		    name	"adjust_op#"
		    label	"Operation"
		    type	integer
		    default	{ "1" }
		    menu	{
			"0"	"Add"
			"1"	"Multiply"
			"2"	"Power (Gamma)"
			"3"	"Complement (Invert)"
			"4"	"Modulo"
			"5"	"Randomize ('Value' seed)"
			"6"	"Add, then Floor"
			"7"	"Absolute"
			"8"	"Triangle [0..v..0]"
			"9"	"Sine ('Value' as freq)"
		    }
		    range	{ 0 10 }
		    export	none
		}
		parm {
		    name	"adjust_value#"
		    label	"Value"
		    type	float
		    default	{ "1" }
		    disablewhen	"{ adjust_op# == 3 } { adjust_op# == 7 }"
		    range	{ -1 4 }
		    export	none
		}
	    }

	    groupradio {
		name	"op_#__5"
		label	"mrg"

		parm {
		    name	"merge_mode#"
		    label	"Mode"
		    type	integer
		    nolabel
		    joinnext
		    default	{ "1" }
		    menu	{
			"0"	"Add"
			"1"	"Multiply"
		    }
		    range	{ 0 10 }
		    export	none
		}
		parm {
		    name	"merge_attrib#"
		    label	"Attribute"
		    type	string
		    default	{ "" }
		    menureplace	{
			[ "# TODO: get attr list from the appropriate input" ]
			[ "" ]
			[ "r = []" ]
			[ "" ]
			[ "try:" ]
			[ "    attrs = hou.pwd().geometry().pointAttribs()" ]
			[ "    attrs = [ a.name() for a in attrs if a.dataType() is not hou.attribData.String ]" ]
			[ "    " ]
			[ "    for a in attrs:" ]
			[ "        r.append(a)" ]
			[ "        r.append(a)" ]
			[ "except:" ]
			[ "    pass" ]
			[ "" ]
			[ "return r" ]
			language	python
		    }
		    range	{ 0 1 }
		    export	none
		}
		parm {
		    name	"merge_attrib_type#"
		    label	"Type / Input"
		    type	integer
		    joinnext
		    default	{ "0" }
		    menu	{
			"0"	"Float"
			"1"	"Integer"
			"2"	"Vector: X"
			"3"	"Vector: Y"
			"4"	"Vector: Z"
			"5"	"Vec.Length"
		    }
		    range	{ 0 10 }
		    export	none
		}
		parm {
		    name	"merge_input_idx#"
		    label	"Input Index"
		    type	integer
		    nolabel
		    joinnext
		    default	{ "0" }
		    menu	{
			"0"	"1st"
			"1"	"2nd"
		    }
		    range	{ 0 1 }
		    export	none
		    parmtag	{ "export_disable" "1" }
		}
		parm {
		    name	"merge_attrib_del#"
		    label	"Delete"
		    type	toggle
		    default	{ "0" }
		    range	{ 0 1 }
		    export	none
		}
	    }

	    groupradio {
		name	"op_#__6"
		label	"map"

		parm {
		    name	"lookup_todo#_2"
		    label	"todo"
		    type	label
		    nolabel
		    default	{ "TODO: remap by curve" }
		    range	{ 0 1 }
		    export	none
		}
	    }

	    groupradio {
		name	"op_#__7"
		label	"out"

		parm {
		    name	"out_attrib#"
		    label	"Rename Attribute to"
		    type	string
		    default	{ "" }
		    menureplace	{
			[ "# TODO: get attr list from the appropriate input" ]
			[ "" ]
			[ "r = []" ]
			[ "" ]
			[ "try:" ]
			[ "    attrs = hou.pwd().geometry().pointAttribs()" ]
			[ "    attrs = [ a.name() for a in attrs if a.dataType() is not hou.attribData.String ]" ]
			[ "    " ]
			[ "    for a in attrs:" ]
			[ "        r.append(a)" ]
			[ "        r.append(a)" ]
			[ "except:" ]
			[ "    pass" ]
			[ "" ]
			[ "return r" ]
			language	python
		    }
		    range	{ 0 1 }
		    export	none
		}
		parm {
		    name	"sepparm#_2"
		    label	"Separator"
		    type	separator
		    default	{ }
		    range	{ 0 1 }
		    export	none
		}
	    }

	}

    }

}
