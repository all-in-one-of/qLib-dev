{
    channel focal {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = lock(1) }
    }
    channel aperture {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = "if(strcmp(chs('light_type'), 'distant') == 0 ||
   strcmp(chs('light_type'), 'sun') == 0,
   1,
   if(ch('coneenable')==0 || ch('light_conefov')==0,
       2*tan(0.5*ch('light_fov')),
       2*tan(0.5*ch('coneangle')+ch('conedelta'))))" }
    }
    channel projection {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = "if(strcmp(chs('light_type'), 'distant')==0 || strcmp(chs('light_type'), 'sun')==0, 1, 0)" }
    }
    channel keeppos {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = ch(\"./l_keeppos\") }
    }
    channel pre_xform {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = ch(\"./l_pre_xform\") }
    }
    channel xOrd {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = ch(\"./l_xOrd\") }
    }
    channel rOrd {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = ch(\"./l_rOrd\") }
    }
    channel tx {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = ch(\"./l_tx\") }
    }
    channel ty {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = ch(\"./l_ty\") }
    }
    channel tz {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = ch(\"./l_tz\") }
    }
    channel rx {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = ch(\"./l_rx\") }
    }
    channel ry {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = ch(\"./l_ry\") }
    }
    channel rz {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = ch(\"./l_rz\") }
    }
    channel lookatpath {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = chsop(\"./l_lookatpath\") }
    }
    channel lookup {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = chs(\"./l_lookup\") }
    }
    channel pathobjpath {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = chsop(\"./l_pathobjpath\") }
    }
    channel pos {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = ch(\"./l_pathpos\") }
    }
    channel uparmtype {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 value = 1 1 expr = ch(\"./l_pathparmtype\") }
    }
    channel pathorient {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 value = 1 1 expr = ch(\"./l_pathorient\") }
    }
    channel bank {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 value = 1 1 expr = ch(\"./l_pathbank\") }
    }
    channel tdisplay {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = ch(\"./l_enabledisplay\") }
    }
    channel display {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 value = 1 1 expr = ch(\"./l_display\") }
    }
    channel picking {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 value = 1 1 expr = ch(\"./l_picking\") }
    }
    channel pickscript {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = chs(\"./l_pickscript\") }
    }
    channel caching {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = ch(\"./l_caching\") }
    }
    channel sx {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 value = 1 1 expr = lock(1) }
    }
    channel sy {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 value = 1 1 expr = lock(1) }
    }
    channel sz {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 value = 1 1 expr = lock(1) }
    }
    channel px {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = lock(0) }
    }
    channel py {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = lock(0) }
    }
    channel pz {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = lock(0) }
    }
    channel scale {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 value = 1 1 expr = lock(1) }
    }
    channel dimmer {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = "if(ch('./light_enable'), ch(\"./light_intensity\"), 0)" }
    }
    channel roll {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = ch(\"./l_pathroll\") }
    }
    channel upx {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = ch(\"./l_pathupx\") }
    }
    channel upy {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = ch(\"./l_pathupy\") }
    }
    channel upz {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = ch(\"./l_pathupz\") }
    }
    channel light_enable {
      lefttype = extend
      righttype = extend
      default = 1
      flags = 0
      segment { length = 0 value = 1 1 expr = ch(\"../light_enable3\") }
    }
    channel light_type {
      lefttype = extend
      righttype = extend
      default = 6
      flags = 0
      segment { length = 0 value = 6 6 expr = ch(\"../back_light_type\") }
    }
    channel ogl_enablelight {
      lefttype = extend
      righttype = extend
      default = 1
      flags = 0
      segment { length = 0 value = 1 1 expr = ch(\"../ogl_enablelight3\") }
    }
    channel light_contribdiff {
      lefttype = extend
      righttype = extend
      default = 1
      flags = 0
      segment { length = 0 value = 1 1 expr = ch(\"../light_contribdiff3\") }
    }
    channel light_contribspec {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = ch(\"../light_contribspec3\") }
    }
    channel light_contribprimary {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = ch(\"../light_contribprimary3\") }
    }
    channel light_colorr {
      lefttype = extend
      righttype = extend
      default = 1
      flags = 0
      segment { length = 0 value = 1 1 expr = ch(\"../light_colorr\") }
    }
    channel light_colorg {
      lefttype = extend
      righttype = extend
      default = 1
      flags = 0
      segment { length = 0 value = 1 1 expr = ch(\"../light_colorg\") }
    }
    channel light_colorb {
      lefttype = extend
      righttype = extend
      default = 1
      flags = 0
      segment { length = 0 value = 1 1 expr = ch(\"../light_colorb\") }
    }
    channel light_intensity {
      lefttype = extend
      righttype = extend
      default = 0.3
      flags = 0
      segment { length = 0 value = 0.30000001192092896 0.30000001192092896 expr = ch(\"../global\")*ch(\"../intensitiesz\") }
    }
    channel shadow_type {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = ch(\"../shadow_type3\") }
    }
    channel shadow_intensity {
      lefttype = extend
      righttype = extend
      default = 1
      flags = 0
      segment { length = 0 value = 1 1 expr = ch(\"../shadow_intensity3\") }
    }
  }
