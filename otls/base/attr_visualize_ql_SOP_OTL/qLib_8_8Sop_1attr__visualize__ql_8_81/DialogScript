# Dialog script for qLib::attr_visualize_ql::1 automatically generated 01/15/13 23:16:04

{
    name	qLib::attr_visualize_ql::1
    script	qLib::attr_visualize_ql::1
    label	"Attr Visualize qL"

    help {
	""
    }

    inputlabel	1	"Geometry to Visualize #1"
    inputlabel	2	"Geometry to Visualize #2"
    inputlabel	3	"Custom pscale geometry"
    inputlabel	4	"Geometry to Visualize #4"
    inputlabel	5	"Object to Copy"

    parm {
	name	"display_info"
	label	"display_info"
	type	label
	nolabel
	default	{ "(*) showing: `opinput(\".\", ch(\"input\")-1)`" }
	range	{ 0 1 }
	export	none
    }
    parm {
	name	"switch_input_1"
	label	"Input #1"
	type	button
	joinnext
	default	{ "1" }
	range	{ 0 1 }
	export	none
	parmtag	{ "script_callback" "opparm `oppwf()` input ( 1 )" }
    }
    parm {
	name	"input"
	label	"Input"
	type	integer
	joinnext
	default	{ "1" }
	range	{ 1 2 }
	export	none
	parmtag	{ "autoscope" "0000000000000000" }
    }
    parm {
	name	"switch_input_2"
	label	"Input #2"
	type	button
	default	{ "1" }
	range	{ 0 1 }
	export	none
	parmtag	{ "script_callback" "opparm `oppwf()` input ( 2 )" }
    }
    parm {
	name	"switch_input_toggle"
	label	"Switch between Inputs"
	type	button
	default	{ "1" }
	range	{ 0 1 }
	export	none
	parmtag	{ "script_callback_language" "python" }
	parmtag	{ "script_callback" "p=hou.pwd().parm('input'); p.set( 2-p.eval()+1 )" }
    }
    parm {
	name	"labelparm"
	label	"Label"
	type	label
	nolabel
	default	{ "" }
	range	{ 0 1 }
	export	none
    }
    group {
	name	"folder1"
	label	"Preprocess"

	group {
	    name	"folder3"
	    label	"Decimation & Safeguards"
	    tabbreak

	    parm {
		name	"dec_presets"
		label	"Presets *"
		type	button
		nolabel
		default	{ "on" }
		menu	{
		    "off"	"Safeguards Off"
		    "points"	"Point Cloud Mode"
		    "geom"	"Regular Geometry"
		    "on"	"Safeguards On"
		}
		range	{ 0 1 }
		export	none
		parmtag	{ "script_callback_language" "python" }
		parmtag	{ "script_callback" "hou.pwd().hdaModule().decpreset(kwargs)" }
	    }
	    parm {
		name	"keep_every_n_comps"
		label	"Keep Every n.# Prims"
		type	toggle
		nolabel
		joinnext
		default	{ "0" }
		range	{ 0! 10 }
		export	none
		parmtag	{ "autoscope" "0000000000000000" }
	    }
	    parm {
		name	"keep_every_n"
		label	"Keep Every Nth"
		type	integer
		joinnext
		default	{ "10" }
		help	"Keep only a single point/primitive of each N."
		disablewhen	"{ keep_every_n_comps == 0 }"
		range	{ 2 100 }
		export	none
	    }
	    parm {
		name	"keep_every_n_entity"
		label	"Entity"
		type	ordinal
		nolabel
		default	{ "primitive" }
		disablewhen	"{ keep_every_n_comps == 0 }"
		menu	{
		    "primitive"	"Primitives"
		    "point"	"Points"
		}
		range	{ 0 1 }
		export	none
		parmtag	{ "autoscope" "0000000000000000" }
	    }
	    parm {
		name	"prim_num_limit"
		label	"Keep First # Prims"
		type	toggle
		nolabel
		joinnext
		default	{ "1" }
		help	"Keep only the first no.# of primitives."
		range	{ 0! 10 }
		export	none
		parmtag	{ "autoscope" "0000000000000000" }
	    }
	    parm {
		name	"prim_num_limit_n"
		label	"Prim.# Limit"
		type	integer
		default	{ "25000" }
		help	"Keep only the first no.# of primitives.\\nThis is a SAFETY option not to have Houdini hang\\nwhen trying to visualize lots of components."
		disablewhen	"{ prim_num_limit == 0 }"
		range	{ 0 50000 }
		export	none
	    }
	}

	group {
	    name	"folder4"
	    label	"Attribute Promotion"

	    parm {
		name	"unique"
		label	"Unique Points"
		type	toggle
		default	{ "0" }
		range	{ 0 1 }
		export	none
	    }
	    parm {
		name	"prim_scale"
		label	"Primitive Scale"
		type	float
		default	{ "0.85" }
		disablewhen	"{ unique == 0 }"
		range	{ 0.0001! 1 }
		export	none
	    }
	    parm {
		name	"promote"
		label	"Promote Attribute(s) to Per-Point"
		type	toggle
		default	{ "0" }
		range	{ 0 1 }
		export	none
	    }
	    import {
		label	"promote params"
		source	"op:attrib_promote"
		token	""
		mask	"inname inclass method"
		enable	1

		parm {
		    name	"inname"
		    label	"Original Name"
		    type	string
		    default	{ "" }
		    disablewhen	"{ promote == 0 }"
		    menutoggle	{
			[ "opmenu -l attrib_promote inname" ]
		    }
		    range	{ 0 1 }
		    export	none
		    parmtag	{ "import_token" "inname" }
		    parmtag	{ "import_source" "op:attrib_promote" }
		    parmtag	{ "autoscope" "0000000000000000" }
		}
		parm {
		    name	"inclass"
		    label	"Original Class"
		    type	ordinal
		    default	{ "primitive" }
		    disablewhen	"{ promote == 0 }"
		    menu	{
			"detail"	"Detail"
			"primitive"	"Primitive"
			"point"	"Point"
			"vertex"	"Vertex"
		    }
		    range	{ 0 1 }
		    export	none
		    parmtag	{ "import_token" "inclass" }
		    parmtag	{ "import_source" "op:attrib_promote" }
		    parmtag	{ "autoscope" "0000000000000000" }
		}
		parm {
		    name	"method"
		    label	"Promotion Method"
		    type	ordinal
		    default	{ "first" }
		    disablewhen	"{ promote == 0 }"
		    menu	{
			"max"	"Maximum"
			"min"	"Minimum"
			"mean"	"Average"
			"mode"	"Mode"
			"median"	"Median"
			"sum"	"Sum"
			"sumsquare"	"Sum of Squares"
			"rms"	"Root Mean Square"
			"first"	"First Match"
			"last"	"Last Match"
		    }
		    range	{ 0 1 }
		    export	none
		    parmtag	{ "import_token" "method" }
		    parmtag	{ "import_source" "op:attrib_promote" }
		    parmtag	{ "autoscope" "0000000000000000" }
		}
	    }

	}

    }

    group {
	name	"folder1_1"
	label	"Scalars"

	parm {
	    name	"color_vis"
	    label	"Enable"
	    type	toggle
	    nolabel
	    joinnext
	    default	{ "0" }
	    range	{ 0! 10 }
	    export	none
	    parmtag	{ "autoscope" "0000000000000000" }
	}
	parm {
	    name	"attr_name"
	    label	"Attribute(s)"
	    type	string
	    joinnext
	    default	{ "pscale" }
	    disablewhen	"{ color_vis == 0 }"
	    menureplace	{
		[ "r = []" ]
		[ "" ]
		[ "try:" ]
		[ "    attrs = hou.pwd().geometry().pointAttribs()" ]
		[ "    attrs = [ a.name() for a in attrs if a.dataType() is not hou.attribData.String ]" ]
		[ "    " ]
		[ "    for a in attrs:" ]
		[ "        r.append(a)" ]
		[ "        r.append(a)" ]
		[ "except:" ]
		[ "    pass" ]
		[ "" ]
		[ "return r" ]
		language	python
	    }
	    range	{ 0 1 }
	    export	none
	    parmtag	{ "parmvop" "1" }
	    parmtag	{ "autoscope" "0000000000000000" }
	}
	parm {
	    name	"attr_type"
	    label	"Type"
	    type	integer
	    nolabel
	    joinnext
	    default	{ "0" }
	    disablewhen	"{ color_vis == 0 }"
	    menu	{
		"0"	"float"
		"1"	"Int."
		"2"	"vector"
	    }
	    range	{ 0 1 }
	    export	none
	    parmtag	{ "parmvop" "1" }
	    parmtag	{ "autoscope" "0000000000000000" }
	}
	parm {
	    name	"attr_comp"
	    label	"Attribute Component"
	    type	integer
	    nolabel
	    default	{ "3" }
	    disablewhen	"{ color_vis == 0 } { attr_type != 2 }"
	    menu	{
		"0"	"X"
		"1"	"Y"
		"2"	"Z"
		"3"	"length"
	    }
	    range	{ 0 2 }
	    export	none
	    parmtag	{ "parmvop" "1" }
	    parmtag	{ "autoscope" "0000000000000000" }
	}
	parm {
	    name	"srcmin"
	    label	"Value Min"
	    type	float
	    default	{ "0" }
	    disablewhen	"{ color_vis == 0 }"
	    range	{ 0 10 }
	    export	none
	    parmtag	{ "parmvop" "1" }
	    parmtag	{ "autoscope" "0000000000000000" }
	}
	parm {
	    name	"srcmax"
	    label	"Value Max"
	    type	float
	    default	{ "1" }
	    disablewhen	"{ color_vis == 0 }"
	    range	{ 0 4 }
	    export	none
	    parmtag	{ "parmvop" "1" }
	    parmtag	{ "autoscope" "0000000000000000" }
	}
	parm {
	    name	"srcexp"
	    label	"Exponent"
	    type	float
	    default	{ "1" }
	    range	{ 0.1 8 }
	    export	none
	    parmtag	{ "shaderparmcontexts" "sop" }
	    parmtag	{ "parmvop" "1" }
	    parmtag	{ "autoscope" "0000000000000000" }
	}
	parm {
	    name	"srcrepeat"
	    label	"Repeat"
	    type	toggle
	    default	{ "off" }
	    range	{ 0 1 }
	    export	none
	    parmtag	{ "shaderparmcontexts" "sop" }
	    parmtag	{ "parmvop" "1" }
	    parmtag	{ "autoscope" "0000000000000000" }
	}
	parm {
	    name	"attr_ramp"
	    label	"Attribute Color Ramp"
	    type	ramp_rgb
	    default	{ "2" }
	    disablewhen	"{ color_vis == 0 }"
	    range	{ 1! 10 }
	    export	none
	    parmtag	{ "rampvalues_var" "attr_ramp_the_key_values" }
	    parmtag	{ "rampkeys_var" "attr_ramp_the_key_positions" }
	    parmtag	{ "rampbasis_var" "attr_ramp_the_basis_strings" }
	    parmtag	{ "autoscope" "0000000000000000" }
	    parmtag	{ "rampcolordefault" "1pos ( 0 ) 1c ( 0 0 1 ) 1interp ( linear ) 2pos ( 1 ) 2c ( 1 0.0666666701 0 ) 2interp ( linear )" }
	    parmtag	{ "rampshowcontrolsdefault" "0" }
	    parmtag	{ "rampcolortype" "hsv" }
	    parmtag	{ "parmvop" "1" }
	    parmtag	{ "rampbasisdefault" "linear" }
	}
	parm {
	    name	"range_in"
	    label	"In/Out Range Mult"
	    type	float
	    joinnext
	    default	{ "1" }
	    range	{ 0 1 }
	    export	none
	    parmtag	{ "shaderparmcontexts" "sop" }
	    parmtag	{ "parmvop" "1" }
	    parmtag	{ "autoscope" "0000000000000000" }
	}
	parm {
	    name	"range_out"
	    label	"Out"
	    type	float
	    nolabel
	    default	{ "0.5" }
	    range	{ 0 1 }
	    export	none
	    parmtag	{ "shaderparmcontexts" "sop" }
	    parmtag	{ "parmvop" "1" }
	    parmtag	{ "autoscope" "0000000000000000" }
	}
	parm {
	    name	"display_gamma"
	    label	"Display Gamma"
	    type	float
	    joinnext
	    default	{ "2.2" }
	    disablewhen	"{ color_vis == 0 }"
	    range	{ 0.01 4 }
	    export	none
	    parmtag	{ "parmvop" "1" }
	    parmtag	{ "autoscope" "0000000000000000" }
	}
	parm {
	    name	"gamma_presets"
	    label	"Label"
	    type	button
	    default	{ "1" }
	    disablewhen	"{ color_vis == 0 }"
	    menumini	{
		"1.0"	"1.0 (linear)"
		"2.2"	"2.2 (sRGB)"
	    }
	    range	{ 0 1 }
	    export	none
	    parmtag	{ "script_callback" "opparm `oppwf()` display_gamma ( $script_value0 )" }
	}
    }

    group {
	name	"folder1_2"
	label	"Vectors"

	parm {
	    name	"vector_vis"
	    label	"Enable"
	    type	toggle
	    nolabel
	    joinnext
	    default	{ "0" }
	    range	{ 0! 10 }
	    export	none
	    parmtag	{ "autoscope" "0000000000000000" }
	}
	parm {
	    name	"vector_attr_name"
	    label	"Attribute Name"
	    type	string
	    default	{ "N" }
	    disablewhen	"{ vector_vis == 0 }"
	    menutoggle	{
		[ "r = []" ]
		[ "" ]
		[ "try:" ]
		[ "    attrs = hou.pwd().geometry().pointAttribs()" ]
		[ "    attrs = [ a.name() for a in attrs if a.size()==3 and a.dataType() is not hou.attribData.String ]" ]
		[ "    " ]
		[ "    for a in attrs:" ]
		[ "        r.append(a)" ]
		[ "        r.append(a)" ]
		[ "except:" ]
		[ "    pass" ]
		[ "" ]
		[ "return r" ]
		language	python
	    }
	    range	{ 0 1 }
	    export	none
	    parmtag	{ "parmvop" "1" }
	    parmtag	{ "autoscope" "0000000000000000" }
	}
	parm {
	    name	"vector_scale"
	    label	"Scale"
	    type	float
	    default	{ "1" }
	    disablewhen	"{ vector_vis == 0 }"
	    range	{ 0 1 }
	    export	none
	}
	parm {
	    name	"vector_unit"
	    label	"Unit Length"
	    type	float
	    joinnext
	    default	{ "1" }
	    disablewhen	"{ vector_vis == 0 }"
	    range	{ 0.001! 1 }
	    export	none
	}
	parm {
	    name	"vector_unit_menu"
	    label	"Unit"
	    type	ordinal
	    nolabel
	    default	{ "0" }
	    disablewhen	"{ vector_vis == 0 }"
	    menumini	{
		"1.0"	"Regular (1.0)"
		"$FPS"	"Velocity (fps)"
	    }
	    range	{ 0 1 }
	    export	none
	    parmtag	{ "script_callback" "opparm `oppwf()` vector_unit ( $script_value0 )" }
	}
    }

    group {
	name	"folder1_3"
	label	"Orient & Scale"

	parm {
	    name	"pscale_vis"
	    label	"Enable"
	    type	toggle
	    nolabel
	    joinnext
	    default	{ "0" }
	    range	{ 0! 10 }
	    export	none
	    parmtag	{ "autoscope" "0000000000000000" }
	}
	parm {
	    name	"pscale_attr_name"
	    label	"Attribute Name"
	    type	string
	    default	{ "pscale" }
	    disablewhen	"{ pscale_vis == 0 }"
	    menutoggle	{
		[ "r = []" ]
		[ "" ]
		[ "try:" ]
		[ "    attrs = hou.pwd().geometry().pointAttribs()" ]
		[ "    attrs = [ a.name() for a in attrs if a.size()==3 and a.dataType() is not hou.attribData.String ]" ]
		[ "    " ]
		[ "    for a in attrs:" ]
		[ "        r.append(a)" ]
		[ "        r.append(a)" ]
		[ "except:" ]
		[ "    pass" ]
		[ "" ]
		[ "return r" ]
		language	python
	    }
	    range	{ 0 1 }
	    export	none
	    parmtag	{ "parmvop" "1" }
	    parmtag	{ "autoscope" "0000000000000000" }
	}
	parm {
	    name	"display_type"
	    label	"Display Type"
	    type	integer
	    default	{ "3" }
	    disablewhen	"{ pscale_vis == 0 }"
	    menu	{
		"0"	"None"
		"1"	"Line"
		"2"	"Spike"
		"3"	"Spike (Bent)"
		"4"	"Circle"
		"5"	"Sphere"
		"6"	"Custom (2nd Input)"
	    }
	    range	{ 0 10 }
	    export	none
	}
	parm {
	    name	"pscale_scale"
	    label	"Uniform Scale"
	    type	float
	    default	{ "1" }
	    disablewhen	"{ pscale_vis == 0 }"
	    range	{ 0 10 }
	    export	none
	    parmtag	{ "autoscope" "0000000000000000" }
	}
	parm {
	    name	"spike_radius"
	    label	"Spike Radius"
	    type	float
	    default	{ "0.1" }
	    disablewhen	"{ pscale_vis == 0 }"
	    range	{ 0 10 }
	    export	none
	}
	parm {
	    name	"sphere_radius"
	    label	"Sphere Radius"
	    type	float
	    default	{ "1" }
	    disablewhen	"{ pscale_vis == 0 }"
	    range	{ 0 10 }
	    export	none
	}
    }

    group {
	name	"folder1_4"
	label	"Markers"

	group {
	    name	"folder5"
	    label	"Display Options -> Markers"

	    parm {
		name	"do_markers_pt"
		label	"do_markers_pt"
		type	toggle
		nolabel
		joinnext
		default	{ "1" }
		range	{ 0 1 }
		export	none
	    }
	    parm {
		name	"markers_pt"
		label	"point"
		type	string
		default	{ "" }
		disablewhen	"{ do_markers_pt == 0 }"
		menutoggle	{
		    [ "r = []" ]
		    [ "" ]
		    [ "try:" ]
		    [ "    attrs = hou.pwd().geometry().pointAttribs()" ]
		    [ "    attrs = [ a.name() for a in attrs if a.dataType() is not hou.attribData.String ]" ]
		    [ "    " ]
		    [ "    for a in attrs:" ]
		    [ "        r.append(a)" ]
		    [ "        r.append(a)" ]
		    [ "except:" ]
		    [ "    pass" ]
		    [ "" ]
		    [ "return r" ]
		    language	python
		}
		range	{ 0 1 }
		export	none
	    }
	    parm {
		name	"do_markers_pr"
		label	"do_markers_pr"
		type	toggle
		nolabel
		joinnext
		default	{ "0" }
		range	{ 0 1 }
		export	none
	    }
	    parm {
		name	"markers_pr"
		label	"primitive"
		type	string
		default	{ "" }
		disablewhen	"{ do_markers_pr == 0 }"
		menutoggle	{
		    [ "r = []" ]
		    [ "" ]
		    [ "try:" ]
		    [ "    attrs = hou.pwd().geometry().primAttribs()" ]
		    [ "    attrs = [ a.name() for a in attrs if a.dataType() is not hou.attribData.String ]" ]
		    [ "    " ]
		    [ "    for a in attrs:" ]
		    [ "        r.append(a)" ]
		    [ "        r.append(a)" ]
		    [ "except:" ]
		    [ "    pass" ]
		    [ "" ]
		    [ "return r" ]
		    language	python
		}
		range	{ 0 1 }
		export	none
	    }
	    parm {
		name	"do_markers_vtx"
		label	"do_markers_vtx"
		type	toggle
		nolabel
		joinnext
		default	{ "0" }
		range	{ 0 1 }
		export	none
	    }
	    parm {
		name	"markers_vtx"
		label	"vertex"
		type	string
		default	{ "" }
		disablewhen	"{ do_markers_vtx == 0 }"
		menutoggle	{
		    [ "r = []" ]
		    [ "" ]
		    [ "try:" ]
		    [ "    attrs = hou.pwd().geometry().vertexAttribs()" ]
		    [ "    attrs = [ a.name() for a in attrs if a.dataType() is not hou.attribData.String ]" ]
		    [ "    " ]
		    [ "    for a in attrs:" ]
		    [ "        r.append(a)" ]
		    [ "        r.append(a)" ]
		    [ "except:" ]
		    [ "    pass" ]
		    [ "" ]
		    [ "return r" ]
		    language	python
		}
		range	{ 0 1 }
		export	none
	    }
	    parm {
		name	"force_text"
		label	"As Numeric"
		type	string
		default	{ "P Cd uv" }
		help	"These attributes will always be displayed in numeric (text) mode."
		menutoggle	{
		    [ "r = []" ]
		    [ "" ]
		    [ "try:" ]
		    [ "    g = hou.pwd().geometry()" ]
		    [ "    attrs = g.pointAttribs() + g.primAttribs() + g.vertexAttribs()" ]
		    [ "    attrs = [ a.name() for a in attrs if a.dataType() is not hou.attribData.String ]" ]
		    [ "" ]
		    [ "    attrs = sorted( list(set(attrs)) )" ]
		    [ "" ]
		    [ "    for a in attrs:" ]
		    [ "        r.append(a)" ]
		    [ "        r.append(a)" ]
		    [ "except:" ]
		    [ "    pass" ]
		    [ "" ]
		    [ "return r" ]
		    language	python
		}
		range	{ 0 1 }
		export	none
	    }
	    parm {
		name	"vel_attribs"
		label	"As Velocity"
		type	string
		default	{ "v accel" }
		help	"These attributes will have text (numeric) markers, regardless of their type."
		menutoggle	{
		    [ "r = []" ]
		    [ "" ]
		    [ "try:" ]
		    [ "    g = hou.pwd().geometry()" ]
		    [ "    attrs = g.pointAttribs() + g.primAttribs() + g.vertexAttribs()" ]
		    [ "    attrs = [ a.name() for a in attrs if a.dataType() is not hou.attribData.String ]" ]
		    [ "" ]
		    [ "    attrs = sorted( list(set(attrs)) )" ]
		    [ "" ]
		    [ "    for a in attrs:" ]
		    [ "        r.append(a)" ]
		    [ "        r.append(a)" ]
		    [ "except:" ]
		    [ "    pass" ]
		    [ "" ]
		    [ "return r" ]
		    language	python
		}
		range	{ 0 1 }
		export	none
	    }
	    parm {
		name	"markers_vec_scale"
		label	"Vector Scale"
		type	float
		default	{ "1" }
		range	{ 0 1 }
		export	none
	    }
	    parm {
		name	"markers_vel_scale"
		label	"Velocity Scale"
		type	float
		default	{ "ch(\"markers_vec_scale\") / $FPS" }
		range	{ 0 1 }
		export	none
	    }
	    parm {
		name	"sep_1"
		label	"----"
		type	label
		nolabel
		default	{ "" }
		range	{ 0 1 }
		export	none
	    }
	    parm {
		name	"do_markers_display"
		label	"do_markers_pt"
		type	toggle
		nolabel
		joinnext
		default	{ "0" }
		range	{ 0 1 }
		export	none
	    }
	    parm {
		name	"markers_display"
		label	"Display in views"
		type	string
		default	{ "pscale v" }
		disablewhen	"{ do_markers_display == 0 }"
		menutoggle	{
		    [ "r = []" ]
		    [ "" ]
		    [ "try:" ]
		    [ "    g = hou.pwd().geometry()" ]
		    [ "    attrs = g.pointAttribs() + g.primAttribs() + g.vertexAttribs()" ]
		    [ "    attrs = [ a.name() for a in attrs if a.dataType() is not hou.attribData.String ]" ]
		    [ "    attrs = sorted(attrs)" ]
		    [ "" ]
		    [ "    for a in attrs:" ]
		    [ "        r.append(a)" ]
		    [ "        r.append(a)" ]
		    [ "except:" ]
		    [ "    pass" ]
		    [ "" ]
		    [ "return r" ]
		    language	python
		}
		range	{ 0 1 }
		export	none
	    }
	    parm {
		name	"build_markers"
		label	"Create/Update Markers"
		type	button
		default	{ "1" }
		range	{ 0 1 }
		export	none
		parmtag	{ "script_callback_language" "python" }
		parmtag	{ "script_callback" "hou.pwd().hdaModule().create_markers(kwargs)" }
	    }
	    parm {
		name	"clear_markers"
		label	"Clear Markers"
		type	button
		default	{ "1" }
		range	{ 0 1 }
		export	none
		parmtag	{ "script_callback_language" "python" }
		parmtag	{ "script_callback" "hou.pwd().hdaModule().clear_built_markers(kwargs)" }
	    }
	    parm {
		name	"sep_3"
		label	"----"
		type	label
		nolabel
		default	{ "" }
		range	{ 0 1 }
		export	none
	    }
	    parm {
		name	"view_nsize"
		label	"Normal Length"
		type	float
		default	{ "0.1" }
		range	{ 0.01! 1 }
		export	none
		parmtag	{ "script_callback_language" "python" }
		parmtag	{ "script_callback" "hou.pwd().hdaModule().set_view_pt_size(kwargs, nsize=kwargs['script_value'])" }
	    }
	}

	group {
	    name	"folder5_1"
	    label	"Misc"

	    parm {
		name	"clear_all_markers"
		label	"Clear All Markers..."
		type	button
		default	{ "1" }
		range	{ 0 1 }
		export	none
		parmtag	{ "script_callback_language" "python" }
		parmtag	{ "script_callback" "hou.pwd().hdaModule().clear_all_markers(kwargs)" }
	    }
	}

    }

    group {
	name	"folder1_5"
	label	"Output"

	parm {
	    name	"display_mode"
	    label	"Display Mode"
	    type	integer
	    default	{ "1" }
	    menu	{
		"0"	"No Geometry"
		"1"	"Show Original Geometry"
		"2"	"Geometry + Points"
		"3"	"Points Only"
	    }
	    range	{ 0! 3 }
	    export	none
	    parmtag	{ "autoscope" "0000000000000000" }
	}
	parm {
	    name	"const_material"
	    label	"Use Constant Material"
	    type	toggle
	    default	{ "0" }
	    disablewhen	"{ display_mode == 0 }"
	    range	{ 0! 10 }
	    export	none
	    parmtag	{ "autoscope" "0000000000000000" }
	}
	parm {
	    name	"sep_2"
	    label	"----"
	    type	label
	    nolabel
	    default	{ "" }
	    range	{ 0 1 }
	    export	none
	}
	parm {
	    name	"view_ptsize"
	    label	"Point (Particle) Size"
	    type	float
	    default	{ "3" }
	    range	{ 1! 6 }
	    export	none
	    parmtag	{ "script_callback_language" "python" }
	    parmtag	{ "script_callback" "hou.pwd().hdaModule().set_view_pt_size(kwargs, ptsize=kwargs['script_value'])" }
	}
    }

}
