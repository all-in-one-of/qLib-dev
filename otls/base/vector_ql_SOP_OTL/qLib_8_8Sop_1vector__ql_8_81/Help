#icon: DATATYPES/angle
#context: sop
#type: node

= Vector qL =

*interface version 1*

"""Performs common operations between per-point vector attributes on the input geometry."""

The most common vector-related operations encapsulated in one node. One of the most frequently used operators.


NOTE:
    Although this node _is_ a wee bit monolithic, it encapsulates the most frequently
    required vector-related operations (and it does that within a single VOP SOP, so it is _fast_).


@Parameters
    Point Group:
        The group of points affected.

    Operation:
        The main vector operation to be performed.
        The following operations are available:
        * Add
        * Substract (A-B)
        * Substract (B-A)
        * Mix
        * Cross Product (AxB)
        * Cross Product (BxA)
        * Multiply (per-component)
        * Pass 1st Input (A)
        * Pass 2nd Input (B)

    Input:

        Vector A/B:

            The two tabs represent separate settings for each of the two sets of vectors.
            All these settings are applied to the vectors (in order) before the main operation.

            Pre-Compute Normal:
                Precompute normals for the input geometry.
    
            Vector:
                Type of vector (geometry attribute or constant).
    
            Attribute Name:
                The name of the vector attribute. (If the second input is not connected
                the attribute is read from the first input.)
    
            Constant:
                Vector value for the Constant type.
    
            Normalize:
                Normalize vector value. (Applies to the constant value as well.)

            Scale with:
                Scale the vector with the specified (float) attribute.


        Mix Settings:

            These settings are used in `Mix` mode only.
    
            Blend Value:
                A constant mixing value.

            Blend Attribute:
                A per-point float attribute to use as mix value.

    Output:
        Normalize Output:
            Applies length normalization right after the main operation.

        Length Multiplier:
            A post-multiplier value for the output vector.

            NOTE:
                *Use this value to convert* between _regular_ (per-frame) and _velocity_ (per-second) vectors.

            Velocity (`v`) for instance is measured as distance per second -- this means a regular unit-length vector
            should be multiplied with `$FPS` in order to apply this conversion.

            There is a small preset menu provided for `Multiply` for converting between unit-length
            and second-based vector lengths.

        Scale:
            An additional length scale factor for the output vector.

        Invert Result:
            Negate the output vector (so it will point to the opposite direction).

        Output Attributes:

            Names and toggles of various attributes to output.

            Vector:
                The target attribute of the vector operation result.
    
            Length:
                The length of the result vector.
                (This vector is _not_ normalized--the Scale factor applies, though.)
    
            \* Dot Product:
                Dot product of the two input vectors.
    
            \* Angle:
                Angle between the two input vectors.
    
                Angle In Degrees:
                    Output angle in degrees instead of radians.

            NOTE:
                \* These are calculated between the vectors for _all_ main operations,
                including `Pass 1st` and `2nd Input`.


@related
    - [Attr Visualize qL|Node:sop/qLib::attr_visualize_ql::1]
    - [Vector Jitter qL|Node:sop/qLib::vector_jitter_ql::1]
    - [Vector Store qL|Node:sop/qLib::vector_store_ql::1]
    - [Node:sop/point]
    - [Node:sop/facet]



@Release_Notes Release Notes

    _interface version 1_ ---

    2012-11-16:
        * Added Multiply (per-component) mode.
        * Added a post-multiply parameter for more convenient conversion between regular and per-second based (velocity) vectors.
        * Some UI + help card improvements.



    _older versions_ ---

    Version 0.1.1:
        * Added options for scaling both input vectors with a scalar (float) attribute before main operation.
        * Some UI fixes, consolidations, cosmetics.
        * Help card revision.

    Version 0.1.1:
        Interface updated. One thread per processor is now the default.

    Version 0.1.0:
        Initial release.
