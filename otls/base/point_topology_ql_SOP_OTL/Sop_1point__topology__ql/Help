#icon: DOP/sopscalarfield
#context: sop
#type: node

= Point Topology qL =

*Version 0.0.3*

"""Performs various topology-related queries and stores the results in point attributes."""

@description
    
    Various queries are available:
    
    Coincident Point Count:

        Finds out how many points occupy the same spatial coordinate.
        (Can be useful to detect un-[Fused|Node:sop/fuse] points.)
        Optionally, multiple coincident points can be grouped.
        The visualization mode can be used to quickly inspect geometry for un-fused points.

    Neighbour Count:

        Determines the number of topological neighbours for each point
        (ie. connected with an edge).
        Optionally, points with small neighbour count (e.g. curve endpoints
        or "lonely" points) can be grouped.


    Indices (point, vertex, etc.):

        Stores point or vertex indices (vertex counts, etc.) as per-point attribute(s).
        The vertex index is relative to the primitive the point belongs to.

        NOTE:
            Most vertex- and primitive-related values are usually ambiguous on polyhedra, since most points belong to
            more than one primitive. These values make more sense on curves, or row/column based geometry
            (e.g. NURBS or meshes).

    
@Parameters

    Visualization:
        Enable visualization of various topological properties. If enabled, a `Visualization` tab will appear in
        all parameter sections that support it. (All visualizations are layered on top of each other in an additive
        fashion.)

        Disabled:
            No visualization.

        Colors:
            A specified value range is mapped to a color ramp, then displayed as per-point colors.

        Colors + Points:
            A particle system is added to the geometry points to make them visually more distinctive.

        Colors, Points Only:
            All geometry but the point particles will be removed (all topology-related calculations will
            still be correct).


    Coincident Points:

        Points are considered coincident if they are closer than a specified minimum distance (tolerance).

        Count Coincident Points:
            Enable counting of coincident points.
    
        Search Radius:
            Distance tolerance for coincident point detection.
            Points closer than this distance are considered coincident.

            NOTE:
                Using larger values for this radius can emulate behaviour similar to the
                nearest-neighbour calculation of the [Node:sop/scatter] SOP.
    
        Max Points:
            The maximum number of points to be considered as coincident within the search radius.
    
            NOTE:
                This limit applies even if there are more points occupying the same location.
                (In that case try increasing this value.)
    
        Attribute:
            Attribute to store the point count. (All coincident points will have the same count value.)
    
        Variable:
            Local variable name associated with the attribute.
    
        Group:
            Name of a point group to be created, based on a point count criterion (see below).
    
        Grouping Criterion:
    
            Equal or Greater:
                Group points which have the given number of coincidents, or more.
    
            Equal:
                Group points that have exactly the same coincidents as specified.
    
            Equal or Less:
                Group points which have the given number of coincidents, or less.
    

    Neighbours:    
        Topological neighbour counting.
        Points are considered neighbours if they are connected through a single edge.

        Count Neighbours:
            Enable counting of neighbours for each point.

        For description of parameters see the `Coincident Points` section above.

    
    Indices:

        Storing of various index counts as per-point attributes. (Note that most
        vertex-related indices are make best sense for curves or row/column based
        surfaces).

        Geometry:
            Extract various geomety-related indices.

            Point Index:
                Store the point index of each point.
                (This is slightly analogous to the `origin` attribute in POP networks.)
    
            Point Idx \[0..1\]:
                Store point indices in a percentage-type format (in the range of `\[0..1\]`).
    
            Vertex Index:
                Store vertex indices.
                (Note that in order to get proper results for a polymesh, its points have to be un[Node:sop/fuse]d first.)
    
            Vertex Idx \[0..1\]:
                Store vertex indices, percentage-style (in the range `\[0..1\]`).
                (Note that for curves this is actually very similar to uniform parametrization.)
    
            Vertices on Prim:
                Store the vertex count of the related primitive, for each point.
    
            Primitive Index:
                Store the index of the primitive the given points belongs to.

        Particles:

            Extract various particle-related indices.
            (...yet to come...)



@related
    - [Node:sop/fuse]
    - [Node:sop/facet]
    - [PointAttr qL|Node:sop/pointattr_ql]
    - [Attr Visualize qL|Node:sop/attr_visualize_ql]


@Release_Notes Release Notes

    Version 0.0.3:
        - Added visualization modes for coincidents and neighbours.
        - Help card enhancements.

    Version 0.0.2:
        Interfacelift; better Help card.

    Version 0.0.1:
        Initial release.
