{
    channel px {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = $GCX }
    }
    channel pz {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = $GCZ }
    }
    channel py {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = $GCY }
    }
    channel tx {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = ch(\"../b/value4v1\")-$CEX }
    }
    channel ty {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = ch(\"../b/value4v2\")-$CEY }
    }
    channel tz {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = ch(\"../b/value4v3\")-$CEZ }
    }
    channel sx {
      lefttype = extend
      righttype = extend
      default = 1
      flags = 0
      segment { length = 0 value = 1 1 expr = "ch(\"../b/value3v1\") / ch(\"../s/value3v1\")" }
    }
    channel sy {
      lefttype = extend
      righttype = extend
      default = 1
      flags = 0
      segment { length = 0 value = 1 1 expr = "ch(\"../b/value3v2\") / ch(\"../s/value3v2\")" }
    }
    channel sz {
      lefttype = extend
      righttype = extend
      default = 1
      flags = 0
      segment { length = 0 value = 1 1 expr = "ch(\"../b/value3v3\") / ch(\"../s/value3v3\")" }
    }
  }
