{
    channel turbulate_t {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = ch(\"../../turbulate_t\") }
    }
    channel turbulate_r {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = ch(\"../../turbulate_r\") }
    }
    channel type_r {
      lefttype = extend
      righttype = extend
      defaultString = \"anoise\"
      flags = 0
      segment { length = 0 expr = chs(\"../../type_r\") }
    }
    channel turb_r {
      lefttype = extend
      righttype = extend
      default = 5
      flags = 0
      segment { length = 0 value = 5 5 expr = ch(\"../../turb_r\") }
    }
    channel rough_r {
      lefttype = extend
      righttype = extend
      default = 0.5
      flags = 0
      segment { length = 0 value = 0.5 0.5 expr = ch(\"../../rough_r\") }
    }
    channel offset_r1 {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = ch(\"../../offset_r1\")+.666 }
    }
    channel offset_r2 {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = ch(\"../../offset_r2\") }
    }
    channel offset_r3 {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = ch(\"../../offset_r3\")+.333 }
    }
    channel freq_r1 {
      lefttype = extend
      righttype = extend
      default = 1
      flags = 0
      segment { length = 0 value = 1 1 expr = ch(\"../../freq_r1\") }
    }
    channel freq_r2 {
      lefttype = extend
      righttype = extend
      default = 1
      flags = 0
      segment { length = 0 value = 1 1 expr = ch(\"../../freq_r2\") }
    }
    channel freq_r3 {
      lefttype = extend
      righttype = extend
      default = 1
      flags = 0
      segment { length = 0 value = 1 1 expr = ch(\"../../freq_r3\") }
    }
    channel position_based {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = ch(\"../../position_based\") }
    }
    channel amp_r {
      lefttype = extend
      righttype = extend
      default = 1
      flags = 0
      segment { length = 0 value = 1 1 expr = ch(\"../../amp_r\") }
    }
    channel axis_amp_r1 {
      lefttype = extend
      righttype = extend
      default = 1
      flags = 0
      segment { length = 0 value = 1 1 expr = ch(\"../../axis_amp_r1\") }
    }
    channel axis_amp_r2 {
      lefttype = extend
      righttype = extend
      default = 1
      flags = 0
      segment { length = 0 value = 1 1 expr = ch(\"../../axis_amp_r2\") }
    }
    channel axis_amp_r3 {
      lefttype = extend
      righttype = extend
      default = 1
      flags = 0
      segment { length = 0 value = 1 1 expr = ch(\"../../axis_amp_r3\") }
    }
    channel turbulate {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = ch(\"../../turbulate\") }
    }
    channel type_t {
      lefttype = extend
      righttype = extend
      defaultString = \"anoise\"
      flags = 0
      segment { length = 0 expr = chs(\"../../type_t\") }
    }
    channel amp_t {
      lefttype = extend
      righttype = extend
      default = 1
      flags = 0
      segment { length = 0 value = 1 1 expr = ch(\"../../amp_t\") }
    }
    channel axis_amp_t1 {
      lefttype = extend
      righttype = extend
      default = 1
      flags = 0
      segment { length = 0 value = 1 1 expr = ch(\"../../axis_amp_t1\") }
    }
    channel axis_amp_t2 {
      lefttype = extend
      righttype = extend
      default = 1
      flags = 0
      segment { length = 0 value = 1 1 expr = ch(\"../../axis_amp_t2\") }
    }
    channel axis_amp_t3 {
      lefttype = extend
      righttype = extend
      default = 1
      flags = 0
      segment { length = 0 value = 1 1 expr = ch(\"../../axis_amp_t3\") }
    }
    channel offset_t1 {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = ch(\"../../offset_t1\") }
    }
    channel offset_t2 {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = ch(\"../../offset_t2\")+.3333 }
    }
    channel offset_t3 {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = ch(\"../../offset_t3\")+.666 }
    }
    channel rough_t {
      lefttype = extend
      righttype = extend
      default = 0.5
      flags = 0
      segment { length = 0 value = 0.5 0.5 expr = ch(\"../../rough_t\") }
    }
    channel turb_t {
      lefttype = extend
      righttype = extend
      default = 5
      flags = 0
      segment { length = 0 value = 5 5 expr = ch(\"../../turb_t\") }
    }
    channel freq_t1 {
      lefttype = extend
      righttype = extend
      default = 1
      flags = 0
      segment { length = 0 value = 1 1 expr = ch(\"../../freq_t1\") }
    }
    channel freq_t2 {
      lefttype = extend
      righttype = extend
      default = 1
      flags = 0
      segment { length = 0 value = 1 1 expr = ch(\"../../freq_t2\") }
    }
    channel freq_t3 {
      lefttype = extend
      righttype = extend
      default = 1
      flags = 0
      segment { length = 0 value = 1 1 expr = ch(\"../../freq_t3\") }
    }
    channel turbulate_s {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = ch(\"../../turbulate_s\") }
    }
    channel type_s {
      lefttype = extend
      righttype = extend
      defaultString = \"anoise\"
      flags = 0
      segment { length = 0 expr = chs(\"../../type_s\") }
    }
    channel amp_s {
      lefttype = extend
      righttype = extend
      default = 1
      flags = 0
      segment { length = 0 value = 1 1 expr = ch(\"../../amp_s\") }
    }
    channel axis_amp_s1 {
      lefttype = extend
      righttype = extend
      default = 1
      flags = 0
      segment { length = 0 value = 1 1 expr = ch(\"../../axis_amp_s1\") }
    }
    channel axis_amp_s2 {
      lefttype = extend
      righttype = extend
      default = 1
      flags = 0
      segment { length = 0 value = 1 1 expr = ch(\"../../axis_amp_s2\") }
    }
    channel axis_amp_s3 {
      lefttype = extend
      righttype = extend
      default = 1
      flags = 0
      segment { length = 0 value = 1 1 expr = ch(\"../../axis_amp_s3\") }
    }
    channel freq_s1 {
      lefttype = extend
      righttype = extend
      default = 1
      flags = 0
      segment { length = 0 value = 1 1 expr = ch(\"../../freq_s1\") }
    }
    channel freq_s2 {
      lefttype = extend
      righttype = extend
      default = 1
      flags = 0
      segment { length = 0 value = 1 1 expr = ch(\"../../freq_s2\") }
    }
    channel freq_s3 {
      lefttype = extend
      righttype = extend
      default = 1
      flags = 0
      segment { length = 0 value = 1 1 expr = ch(\"../../freq_s3\") }
    }
    channel offset_s1 {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = ch(\"../../offset_s1\")+.333 }
    }
    channel offset_s2 {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = ch(\"../../offset_s2\")+.666 }
    }
    channel offset_s3 {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = ch(\"../../offset_s3\") }
    }
    channel rough_s {
      lefttype = extend
      righttype = extend
      default = 0.5
      flags = 0
      segment { length = 0 value = 0.5 0.5 expr = ch(\"../../rough_s\") }
    }
    channel turb_s {
      lefttype = extend
      righttype = extend
      default = 5
      flags = 0
      segment { length = 0 value = 5 5 expr = ch(\"../../turb_s\") }
    }
    channel uniform {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = ch(\"../../uniform\") }
    }
  }
