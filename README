qLib
====

A more or less cohherent and maintained houdini asset library.


Installation instructions
=========================

You should place the unpacked folder to a convenient place, where everyone can
reach it, and add the qLib/houdini11.0/otls/base folder to the
HOUDINI_OTLSCAN_PATH environment variable.

Dumping the otl files into a folder which contains other otls is considered bad
behavior, and will seriously and needlessly make updating the library more
difficult.


Sections
========

There are four sections of the asset library: core, base, spec, and unapproved.
The assets belonging the different sections are stored in directories with the
same name.

The 'base' assets are intended to be used as building blocks of more
complex networks.

The 'core' assets are intended to be used as building blocks of 'base' level
assets.

The 'spec' assets are intended for per-project based inclusion (e.g. high level
objects like water drops and such), so you probalbly don't want to include that
in the HOUDINI_OTLSCAN_PATH. But this decision is up to you.

The 'future' assets are not yet integrated into the main distribution. They
may lack documentation or other mandatory requirement to be included into the
'main' distribution or they simply need more testing. We still include them
because they can be usefull even before they fulfill those requirements.


Building and extracting OTLs
============================

For better version management the assets are distributed in ascii form. This
means that the OTLs must be built before importing into houdini. qLib provides
the 'qdo.py' helper script to aid the process of library management.

Building binary OTLs from the ascii directories
-----------------------------------------------

The following command will build the whole library:

./qdo.py build -R

The following command will build just the 'base' otls:

./qdo.py build -R houdini11.0/otls/base/

Of course the exact commands may be different if you are not in the top level
of the qLib distribution.

You can also build just one single asset:

./qdo.py build -R houdini11.0/otls/base/bend_ql_OTL

Extracting ascii directorie structures from binary OTLs
-------------------------------------------------------

The logic is the same here, just the subcommand differs:

./qdo.py extract -R
./qdo.py extract -R houdini11.0/otls/base
./qdo.py extract houdini11.0/otls/base/bend_ql.otl

Cleaning up after yourself
--------------------------

Sometimes it's handy to clean up the mess after your work. The logic is the
same here, you can use the '-R' flag to initiate recursive behavior. The next
command will clear all binary OTLs recursively under the current directory:

./qdo.py clean -R

If you want to remove the extracted directories use the '-s' or '--source'
flag. For example:

./qdo.py clean -sR houdini11.0/otls/base

Use the '--help' flag
---------------------

If you are uncertain you can always use the '-h' or '--help' flag to see all
the available subcommands and flags, or if you put it after a subcommand the
help of that particular command.
