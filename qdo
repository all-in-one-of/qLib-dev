#!/usr/bin/python

import argparse
import os
import subprocess
import sys
import glob
import tarfile
import datetime

# Declare global variable name
args = None

def build_cmd():
    for f in files():
        if os.path.isdir(f):
            debug('Processing: ' + f)
            if f[-len(args.extension):] == args.extension:
                otl = f[:-len(args.extension)] + '.otl'
                print 'Building:', otl
                try:
                    output = subprocess.check_output(['hotl', '-C', f, otl],
                            stderr=subprocess.STDOUT)
                except subprocess.CalledProcessError as e:
                    print 'ERROR: The build process of {0} failed.'.format(otl)
                    print e.output
                    break
                except OSError as e:
                    print 'ERROR: The build process of {0} failed.'.format(otl)
                    print '{0} ({1})'.format(e.strerror, e.errno)
                    break

def extract_cmd():
    for f in files():
        if os.path.isfile(f):
            debug('Processing: ' + f)
            if f[-4:] == '.otl':
                dir = f[:-4] + args.extension
                print 'Extracting:', f
                try:
                    output = subprocess.check_output(['hotl', '-X', dir, f],
                            stderr=subprocess.STDOUT)
                except subprocess.CalledProcessError as e:
                    print 'ERROR: The extraction process of {0} failed.'.format(f)
                    print e.output
                    break
                except OSError as e:
                    print 'ERROR: The extraction process of {0} failed.'.format(f)
                    print '{0} ({1})'.format(e.strerror, e.errno)
                    break

def clean_cmd():
    for f in files():
        if args.source:
            if os.path.isdir(f):
                debug('Processing: ' + f)
                if f[-len(args.extension):] == args.extension:
                    print 'Deleting:', f
                    try:
                        output = subprocess.check_output(['rm', '-r', f],
                                stderr=subprocess.STDOUT)
                    except subprocess.CalledProcessError as e:
                        print 'ERROR: Removing {0} failed.'.format(otl)
                        print e.output
                        break
                    except OSError as e:
                        print 'ERROR: Removing {0} failed.'.format(otl)
                        print '{0} ({1})'.format(e.strerror, e.errno)
                        break
        else:
            if os.path.isfile(f):
                debug('Processing: ' + f)
                if f[-4:] == '.otl':
                    dir = f[:-4] + args.extension
                    print 'Deleting:', f
                    try:
                        output = subprocess.check_output(['rm', f],
                                stderr=subprocess.STDOUT)
                    except subprocess.CalledProcessError as e:
                        print 'ERROR: Removing {0} failed.'.format(f)
                        print e.output
                        break
                    except OSError as e:
                        print 'ERROR: Removing {0} failed.'.format(f)
                        print '{0} ({1})'.format(e.strerror, e.errno)
                        break

def pack_cmd():
    qlib_dir = os.path.dirname(os.path.realpath(__file__))
    qlib_parent = os.path.dirname(qlib_dir)
    if qlib_dir.split(os.sep)[-1] != "qLib":
        print "WARNING: Archived directory is not called 'qLib'."
    try:
        git_tag = subprocess.check_output(["git", "tag"],
                stderr=subprocess.STDOUT)
    except subprocess.CalledProcessError as e:
        print "ERROR: Retrieving git tag failed."
        print e.output
        sys.exit(1)
    except OSError as e:
        print 'ERROR: Git not accessible.'
        print '{0} ({1})'.format(e.strerror, e.errno)
        sys.exit(1)
    git_tag = git_tag[:-1]
    if not git_tag:
        print "WARNING: Empty git tag, using 'NOTAG' instead."
        git_tag = "NOTAG"
    debug("qLib dir: {0}  qLib parent dir: {1}, git tag: {2}".format(qlib_dir, qlib_parent, git_tag))
    file_list = []
    file_list.append(os.path.join(qlib_dir, "README"))
    file_list.extend(glob.glob(os.path.join(qlib_dir, "examples", "*.hip")))
    if args.backup:
        tar_name = "qLib-backup-" + datetime.date.today().isoformat() + ".tbz2"
        file_list.extend(glob.glob(os.path.join(qlib_dir, "houdini11.0", "otls", "*", "*_OTL")))
    else:
        tar_name = "qLib-" + git_tag + ".tbz2"
        file_list.extend(glob.glob(os.path.join(qlib_dir, "houdini11.0", "otls", "*", "*.otl")))
    file_list = [(f, os.path.relpath(f, qlib_parent)) for f in file_list]
    tar_file = tarfile.open(tar_name, "w:bz2")
    for f in file_list:
        print "Adding: {0}".format(f[1])
        tar_file.add(f[0],f[1])
    tar_file.close()
    

def files():
    for a in args.file:
        debug("Yielding file: {0}".format(a))
        yield a
        if os.path.isdir(a):
            for d in os.walk(a):
                if not args.recursive and d[0] != a:
                    break
                for f in d[1] + d[2]:
                    jf = os.path.join(d[0],f)
                    debug("Yielding file: {0}".format(jf))
                    yield jf

def debug(msg):
    """
    Print debug messages
    """
    if args.debug:
        print "DEBUG:", msg

def parse_args():
    """
    Parse command line arguments.
    """

    common_args = argparse.ArgumentParser(add_help=False)
    common_args.add_argument('-D', '--debug', action='store_true',
            help='Print debug messages')

    otl_args = argparse.ArgumentParser(add_help=False)
    otl_args.add_argument('file', type=str, nargs='*', default='.',
            help='File and/or directory to process ["%(default)s"]')
    otl_args.add_argument('-x','--extension', type=str, default='_OTL',
            help='File extension of extracted OTL directories ["%(default)s"]')
    otl_args.add_argument('-R', '--recursive', action='store_true',
            help='Descend into sub-directories')

    main_parser = argparse.ArgumentParser(parents=[common_args],
            description='Command line tool to manage qLib.')

    subparsers = main_parser.add_subparsers(dest='command', help='Supported commands')

    build_parser = subparsers.add_parser('build', parents=[common_args, otl_args],
            help='Builds OTLs from extracted dir structures',
            description='Builds OTLs from extracted dir structures.')
    extract_parser = subparsers.add_parser('extract', parents=[common_args, otl_args],
            help='Extracts OTLs into dir structures',
            description='Extracts OTLs into dir structures.')
    clean_parser = subparsers.add_parser('clean', parents=[common_args, otl_args],
            help='Removes OTLs or OTL sources',
            description='Removes OTLs or OTL sources.')
    pack_parser = subparsers.add_parser('pack', parents=[common_args],
            help='Creates tarballs for ditribution and backup purposes.')

    clean_parser.add_argument('-s', '--source', action='store_true',
            help='Deletes sources instead of built OTLs')

    pack_parser.add_argument('-b', '--backup', action='store_true',
            help='Creates a backup archive instead of distribution archive.')

    global args
    args = main_parser.parse_args()

    debug(args)

# Main
parse_args()

{'build': build_cmd,
'extract': extract_cmd,
'clean': clean_cmd,
'pack': pack_cmd,
}[args.command]()
